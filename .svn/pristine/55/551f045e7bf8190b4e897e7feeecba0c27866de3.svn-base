<?php

namespace App\Http\Controllers\Admin\Goods;


use App\Models\Goods\StAppGoodsSale;
use App\Models\Goods\StCategory;
use App\Models\Goods\StGoods;
use App\Models\Goods\StGoodsSale;
use App\Models\Mall\StMall;
use App\Models\StApp;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Wm;


class GoodsController extends Controller
{

    /**
     * 商品资料列表首页
     * @param Request $request
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(Request $request)
    {

        return view('admin/goods/index', []);
    }

    /**
     * 商品列表查询
     * @param Request $request
     * @param $type
     * @return array
     */
    public function search(Request $request ,$type)
    {

        $name = $request -> input( 'name' ,'');
        $sku = $request -> input( 'sku' ,'');
        $upc = $request -> input( 'upc' ,'');
        $category_id = $request -> input( 'category_id' ,'');
        $search_image = $request -> input('image','');
        $search_weight = $request -> input('weight','');

        $where = [];

        //图片
        if( !empty($search_image)){
            $where[] = [ 'image' ,''];
        }

        //商品名称
        if( !empty($name)){
            $where[] = ['name','like','%'.$name.'%'];
        }

        //商品分类
        if(!empty($category_id)){

            $category = StCategory::find($category_id);

            if( $category ){
                switch ( $category -> level ){
                    case '1' :
                        $where[] = ['big_category_id', $category_id ];
                        break;
                    case '2' :
                        $where[] = ['mid_category_id', $category_id ];
                        break;
                    case '3' :
                        $where[] = ['small_category_id', $category_id ];
                        break;
                }
            }
        }

        if( $type == 1 ){
            $where[] = ['status', 1 ];
        }

        if( $type == 2 ){
            $where[] = ['status', 2 ];
        }

        $st_goods = StGoods::where($where)
                            ->orderBy($request->input('sort'), $request->input('order'))
                            ->paginate($request->input('limit'), ['*'], '', $request->input('offset') / 10 + 1 )
                            ->toArray();

        //返回数组
        $result_data = [
            'total' => 0,
            'rows' =>[]
        ];

        if( !empty($st_goods)){

            foreach ( $st_goods['data'] as $goods){

                $where_sale = [];

                if( !empty($sku)){
                    $where_sale[] = ['sku',$sku];
                }

                if( !empty($upc)){
                    $where_sale[] = ['upc',$upc];
                }


                $st_goods_sale = StGoodsSale::where($where_sale)->where('goods_id',$goods['id'])->get();

                if( !$st_goods_sale->isEmpty()){
                    foreach ( $st_goods_sale as $item ){
                        $price_arr[] = $item -> price;
                        $weight_arr[] = $item -> weight;
                        $sku = $item -> sku ;
                        $upc = $item -> upc ;
                    }

                    if( min($price_arr) == max($price_arr)){
                        $price = min($price_arr);
                    }else{
                        $price = min($price_arr) . '~' .max($price_arr);
                    }

                    if( min($weight_arr) == max($weight_arr)){
                        $weight = min($weight_arr);
                    }else{
                        $weight = min($weight_arr) . '~' .max($weight_arr);
                    }

                    if( !empty($goods['big_category_name'])){

                        if( !empty($goods['mid_category_name'])){

                            $category = $goods['big_category_name'] . '->'.$goods['mid_category_name'];
                        }else{
                            $category = $goods['big_category_name'];
                        }

                    }

                    $operation = $goods['status']==1 ? '下架' :'上架' ;

                    if( empty($goods['image'])){

                        $info = $goods['name'];
                    }else{

                        $info = '<img src="'. $goods['image'].'" style="width:50px;" >'. $goods['name'] ;
                    }


                    if( !empty($search_weight)){

                        if($weight == 0 ){

                            $result_data['total'] ++ ;

                            $result_data['rows'][] = [
                                'operation' => '<a href="#">编辑</a>&nbsp;&nbsp;<a href="#" class="forsale" data-id="'.$goods['id'].'" data-type="'. $goods['status'] .'">' . $operation . '</a>',
                                'info' => $info ,
                                'sku_upc' => $sku .'<br/>' .$upc ,
                                'price' => $price . '<a href="#" class="price" data-id="'. $goods['id'] .'"><img src="/images/admin/updates.png" width="40px;"></a>' ,
                                'category' => $category ,
                                'unit' => $goods['unit'] ,
                                'weight' => $weight ,
                                'status' => $goods['status'] == 1 ? '售卖中' : '已下架'
                            ];
                        }
                    }else{

                        $result_data['total'] ++ ;

                        $result_data['rows'][] = [
                            'operation' => '<a href="#">编辑</a>&nbsp;&nbsp;<a href="#" class="forsale" data-id="'.$goods['id'].'" data-type="'. $goods['status'] .'">' . $operation . '</a>',
                            'info' => $info ,
                            'sku_upc' => $sku .'<br/>' .$upc ,
                            'price' => $price . '<a href="#" class="price" data-id="'. $goods['id'] .'"><img src="/images/admin/updates.png" width="40px;"></a>' ,
                            'category' => $category ,
                            'unit' => $goods['unit'] ,
                            'weight' => $weight ,
                            'status' => $goods['status'] == 1 ? '售卖中' : '已下架'
                        ];
                    }

                }
            }
        }

        return $result_data;
    }

    /**
     * 上下架
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function shelf(Request $request){

        $ids = $request->input('id_arr','');
        $status = $request->input('type','');

        if( empty($status)){
            return response()->json(['code' => 400 ,'message' => '缺少参数']);
        }

        $goods_status = $status == 1 ? 2 : 1 ;

        if( empty($ids)){
            return response()->json(['code' => 400 ,'message' => '缺少商品参数']);
        }

        foreach ( $ids as $id ){

            $st_goods = StGoods::find($id);
            $st_goods -> status = $goods_status ;
            $st_goods -> save();

            StGoodsSale::where('goods_id', $id )->update(['status' => $goods_status]);

        }

        //应用平台同步
        $st_app = StApp::where('enable', 1 )->get();  //查询开通的应用

        if( !$st_app ->isEmpty()){

            foreach ($st_app as $app ){

                switch ( $app -> id){

                    case "1" :

                        $st_ids = [];

                        foreach ( $ids as $id ){

                            $st_app_goods_sale = StAppGoodsSale::select('o_goods_id')->where([['goods_id',$id],['app_id', 1]] )->get();

                            if( !$st_app_goods_sale->isEmpty()){

                                foreach ( $st_app_goods_sale as $st_app_goods ){
                                    $st_ids = $st_app_goods['o_goods_id'];
                                }
                            }

                            $args = [
                                'is_shelf' => $status == 1 ?  0  : 1 ,
                                'goods' => $st_ids
                            ];

                            $res = Wm::send('bd.goods.batch_update_self',$args);

                            if( $res['code'] != 200 ){
                                return response()->json(['code' => 400 , 'message' => $res['message']]);
                            }

                            StAppGoodsSale::whereIn('o_goods_id',$st_ids)->update(['status',$goods_status]);
                        }

                        break;
                    case "2" :

                        $st_ids = [];

                        foreach ( $ids as $id ){

                            $st_app_goods_sale = StAppGoodsSale::select('o_goods_id')->where([['goods_id',$id],['app_id', 2]] )->get();

                            if( !$st_app_goods_sale->isEmpty()){

                                foreach ( $st_app_goods_sale as $st_app_goods ){
                                    $st_ids = $st_app_goods['o_goods_id'];
                                }
                            }

                            $args = [
                                'is_shelf' => $status == 1 ?  0  : 1 ,
                                'goods' => $st_ids
                            ];

                            $res = Wm::send('ele.goods.batch_update_self',$args);

                            if( $res['code'] != 200 ){
                                return response()->json(['code' => 400 , 'message' => $res['message']]);
                            }

                            StAppGoodsSale::whereIn('o_goods_id',$st_ids)->update(['status',$goods_status]);
                        }

                        break;
                    case "3" :

                        $st_ids = [];

                        foreach ( $ids as $id ){

                            $st_app_goods_sale = StAppGoodsSale::select('o_goods_id')->where([['goods_id',$id],['app_id', 3]] )->get();

                            if( !$st_app_goods_sale->isEmpty()){

                                foreach ( $st_app_goods_sale as $st_app_goods ){
                                    $st_ids = $st_app_goods['o_goods_id'];
                                }
                            }

                            $args = [
                                'is_shelf' => $status == 1 ?  0  : 1 ,
                                'goods' => $st_ids
                            ];

                            $res = Wm::send('mt.goods.batch_update_self',$args);

                            if( $res['code'] != 200 ){
                                return response()->json(['code' => 400 , 'message' => $res['message']]);
                            }

                            StAppGoodsSale::whereIn('o_goods_id',$st_ids)->update(['status',$goods_status]);
                        }

                        break;
                    case "4" :

                        $st_ids = [];

                        foreach ( $ids as $id ){

                            $st_app_goods_sale = StAppGoodsSale::select('o_goods_id')->where([['goods_id',$id],['app_id', 4]] )->get();

                            if( !$st_app_goods_sale->isEmpty()){

                                foreach ( $st_app_goods_sale as $st_app_goods ){
                                    $st_ids = $st_app_goods['o_goods_id'];
                                }
                            }

                            $args = [
                                'is_shelf' => $status == 1 ?  0  : 1 ,
                                'goods' => $st_ids
                            ];

                            $res = Wm::send('jd.goods.batch_update_self',$args);

                            if( $res['code'] != 200 ){
                                return response()->json(['code' => 400 , 'message' => $res['message']]);
                            }

                            StAppGoodsSale::whereIn('o_goods_id',$st_ids)->update(['status',$goods_status]);
                        }

                        break;
                }
            }
        }

        return response()->json(['code' => 200 , 'message' => '操作成功']);
    }

    /**
     * 查询单个商品规格价格
     * @param $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function searchPrice( $id ){

        $st_goods_sale = StGoodsSale::where('goods_id', $id )->get();

        if( !$st_goods_sale -> isEmpty()){

            $return_data['total'] = count($st_goods_sale);

            foreach ( $st_goods_sale as $goods ){

                $return_data['goods'][] = [
                    'goodsName' => $goods -> name,
                    'spec' => $goods -> spec,
                    'salePrice' => $goods -> price,
                    'spec_id' => $goods -> id,
                    'goods_id' => $goods -> goods_id
                ];
            }
        }

        return response()->json(['code' => 200 ,'data' =>$return_data ]);
    }

    /**
     * 修改商品价格
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function editPrice(Request $request){

        $goods_id = $request -> input('goods_id' ,'');
        $spec_id = $request -> input('spec_id' , '');
        $price = $request -> input('price' ,'');

        if( empty( $spec_id)){
            return response()->json(['code' => 400 ,'message' => '缺少参数']);
        }

        $st_goods = StGoods::find($goods_id);
        $st_goods -> price = $price[0];
        $st_goods -> save();

        foreach ( $spec_id as $key => $spec ){

            $st_goods_sale = StGoodsSale::find( $spec );
            $st_goods_sale -> price = $price[$key] ;
            $st_goods_sale -> save();

        }

        //应用平台同步
        $st_app = StApp::where('enable', 1 )->get();  //查询开通的应用

        if( !$st_app -> isEmpty()){
            foreach ( $st_app as $app ){

                switch ( $app -> id ){
                    case '1' :

                        $st_mall = StMall::leftJoin('st_app_mall','st_mall.id', '=' , 'st_app_mall.mall_id')
                                        ->where('st_mall.status', 1 )
                                        ->where('st_app_mall.app_id' , 1 )
                                        ->get();

                        if( !$st_mall -> isEmpty()){

                            foreach ($st_mall as $mall ){

                                $args = [
                                    'mall_code' => $mall -> code,
                                    'goods' => [
                                            $goods_id => [
                                                array_combine($spec_id ,$price)
                                       ]
                                    ]
                                ];

                                $res = Wm::send('bdfood.goods.batch_update_price' ,$args );

                                if( $res['code'] != 200 ){
                                    return response()->json(['code' => 400 ,'message' => $res['message']]);
                                }

                                foreach ($spec_id as $key => $item) {

                                    StAppGoodsSale::where([['mall_id',$mall -> id ],['app_id', 1],['spec_id',$item]])->update(['price' => $price[$key]]);
                                }

                            }
                        }
                        break;
                    case '2' :

                        $st_mall = StMall::leftJoin('st_app_mall','st_mall.id', '=' , 'st_app_mall.mall_id')
                            ->where('st_mall.status', 1 )
                            ->where('st_app_mall.app_id' , 2 )
                            ->get();

                        if( !$st_mall -> isEmpty()){

                            foreach ($st_mall as $mall ){

                                $args = [
                                    'mall_code' => $mall -> code,
                                    'goods' => [
                                        $goods_id => [
                                            array_combine($spec_id ,$price)
                                        ]
                                    ]
                                ];

                                $res = Wm::send('eleme.goods.batch_update_price' ,$args );

                                if( $res['code'] != 200 ){
                                    return response()->json(['code' => 400 ,'message' => $res['message']]);
                                }

                                foreach ($spec_id as $key => $item) {

                                    StAppGoodsSale::where([['mall_id',$mall -> id ],['app_id', 2],['spec_id',$item]])->update(['price' => $price[$key]]);
                                }

                            }
                        }
                        break;
                    case '3' :

                        $st_mall = StMall::leftJoin('st_app_mall','st_mall.id', '=' , 'st_app_mall.mall_id')
                                            ->where('st_mall.status', 1 )
                                            ->where('st_app_mall.app_id' , 3 )
                                            ->get();

                        if( !$st_mall -> isEmpty()){

                            foreach ($st_mall as $mall ){

                                $args = [
                                    'mall_code' => $mall -> code,
                                    'goods' => [
                                        $goods_id => [
                                            array_combine($spec_id ,$price)
                                        ]
                                    ]
                                ];

                                $res = Wm::send('mtfood.goods.batch_update_price' ,$args );

                                if( $res['code'] != 200 ){
                                    return response()->json(['code' => 400 ,'message' => $res['message']]);
                                }

                                foreach ($spec_id as $key => $item) {

                                    StAppGoodsSale::where([['mall_id',$mall -> id ],['app_id', 3],['spec_id',$item]])->update(['price' => $price[$key]]);
                                }

                            }
                        }
                        break;
                    case '4' :

                        $st_mall = StMall::leftJoin('st_app_mall','st_mall.id', '=' , 'st_app_mall.mall_id')
                                                ->where('st_mall.status', 1 )
                                                ->where('st_app_mall.app_id' , 4 )
                                                ->get();

                        if( !$st_mall -> isEmpty()){

                            foreach ($st_mall as $mall ){

                                $args = [
                                    'mall_code' => $mall -> code,
                                    'goods' => [
                                        $goods_id => [
                                            array_combine($spec_id ,$price)
                                        ]
                                    ]
                                ];

                                $res = Wm::send('jdDj.goods.batch_update_price' ,$args );

                                if( $res['code'] != 200 ){
                                    return response()->json(['code' => 400 ,'message' => $res['message']]);
                                }

                                foreach ($spec_id as $key => $item) {

                                    StAppGoodsSale::where([['mall_id',$mall -> id ],['app_id', 4],['spec_id',$item]])->update(['price' => $price[$key]]);
                                }

                            }
                        }
                        break;
                }
            }
        }
        return response()->json(['code' => 200 ,'message' => '操作成功']);
    }
    /**
     * 新增/编辑商品资料页
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */

    public function edit()
    {

        $st_category = StCategory::orderBy('sort','ASC')->get();

        if( !$st_category -> isEmpty()){

            $st_category = $this -> getTree( $st_category->toArray() , 0 );
        }

        return view('admin/goods/edit', ['category' => json_encode($st_category)]);
    }


    /**
     * 新增/编辑提交商品资料信息
     * @return \Illuminate\Http\JsonResponse
     */
    public function submit()
    {

        return response()->json(['code'=>200, 'message'=>'ok', 'data'=>[]]);

    }

    /**
     * 数据结构转换
     * @param $data
     * @param $pId
     * @return array|string
     */
    private function getTree($data, $pId)
    {
        $tree = '';

        foreach ($data as $k => $v){
            if($v['p_id'] == $pId)
            {
                $v['children'] = $this->getTree($data, $v['id']);
                $tree[] = $v;
            }
        }
        return $tree;
    }

}