<?php

namespace App\Http\Controllers\Api\User;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Redis as Redis;

use App\Models\User\StUser;
use App\Models\User\StUserDevices;
use App\Models\Mall\StMall;


class LoginController extends Controller
{


    /**
     * 用户登录接口
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function login(Request $request)
    {

        $app_client = $request->input('app_client');
        $mobile = $request->input('mobile');
        $password = $request->input('password');
        $device = $request->input('device', '');
        $device_type = $request->input('device_type', 0);

        if ( empty($mobile) ) {
            return response()->json(['code'=>400, 'message'=>'手机号码不能为空']);
        } else if ( !isMobile($mobile) ) {
            return response()->json(['code'=>400, 'message'=>'手机号格式错误']);
        }

        $user = StUser::where('mobile', $mobile)->first();
        if (!$user) {
            return response()->json(['code'=>404, 'message'=>'用户信息没有找到']);
        } else if ($user->status == 0) {
            return response()->json(['code'=>404, 'message'=>'当前用户已禁用']);
        }

        $return_result = [];

        if ($user->type == 2) {
            $mall = StMall::find($user->mall_id);
            if (!$mall) {
                return response()->json(['code'=>404, 'message'=>'门店信息没有找到']);
            }
        }

        if ($app_client == 2) {

            if (empty($device) || empty($device_type)) {
                return response()->json(['code'=>400, 'message'=>'缺少设备符号或设备类型']);
            }

            $mall_id = isset($mall)
                ? $mall->id
                : 0;

            $mall_name = isset($mall)
                ? $mall->name
                : '';

            $return_result = [
                'user_id' => app_to_int($user->id),
                'user_name' => app_to_string($user->name),
                'full_name' => app_to_string($user->full_name),
                'user_type' => app_to_int($user->type),
                'mall_id' => app_to_int($mall_id),
                'mall_name' => app_to_string($mall_name)
            ];

            $mall_array = StMall::get();
            if ($mall_array->count() > 0) {
                foreach($mall_array as $m) {
                    $return_result['mall'][] = [
                        'mall_id' => app_to_int($m->id),
                        'mall_name' => app_to_string($m->name),
                        'mall_code' => app_to_string($m->code)
                    ];
                }
            }

            $user_devices_search = StUserDevices::where([
                'device'=>$device,
                'type'=>$device_type
            ])->first();

            if ($user_devices_search) {
                $user_devices = StUserDevices::find($user_devices_search->id);
            } else {
                $user_devices = new StUserDevices();
                $user_devices->device = $device;
                $user_devices->type = $device_type;
                $user_devices->creator = $user->name;
                $user_devices->work_state = 1;
            }
            $user_devices->user_id = $user->id;
            $user_devices->save();

            $return_result['device_work_state'] = app_to_int($user_devices->work_state);

        } else {

            if ( empty($password)) {
                return response()->json(['code'=>400, 'message'=>'登录密码不能为空']);
            } else if (!isPwd($password)) {
                return response()->json(['code'=>400, 'message'=>'登录密码格式不正确']);
            } else if (md5($password) != $user->pwd) {
                return response()->json(['code'=>400, 'message'=>'用户密码不正确']);
            }

            Redis::setex('ST_MALL_ID_' . session()->getId(), 86400, $user->mall_id);
            Redis::setex('ST_USER_TYPE_' . session()->getId(), 86400, $user->type);
            Redis::setex('ST_USER_ID_' . session()->getId(), 86400, $user->id);

        }

        return response()->json(['code' => 200, 'message' => '登录成功', 'data' => $return_result]);

    }


    /**
     * 用户登出接口
     * @return \Illuminate\Http\JsonResponse
     */
    public function logout()
    {

        Redis::del('ST_MALL_ID_' . session()->getId());
        Redis::del('ST_USER_TYPE_' . session()->getId());
        Redis::del('ST_USER_ID_' . session()->getId());

        return response()->json(['code'=>200, 'message'=>'ok']);

    }


}
