<?php

namespace App\Http\Controllers\Api\Develop;

use App\Http\Controllers\Controller;
use App\Models\Goods\StAppGoodsSale;
use App\Models\Goods\StGoods;
use App\Models\Goods\StGoodsSale;
use App\Models\Mall\StMall;
use Illuminate\Http\Request;
use Wm;


class GoodsController extends Controller
{


    /**
     * 批量新增商品
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function batchAdd(Request $request)
    {

        $body = $request->input('body','');
        $body_arr = json_decode($body ,true);

        if( !is_array($body_arr) || empty($body_arr) ){
            return response() -> json([
                'errCode' => 1,
                'errMsg' => '缺少商品参数:body',
                'data' => []
            ]);
        }

        foreach ( $body_arr as $item ){
            if( !isset($item['skuId']) || empty($item['skuId'])){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10000,
                            'errMsg' => "商品编码不能为空",
                            'skuId' => ''
                        ]
                    ]
                ]);
            }

            if( !isset($item['goodsName']) || empty($item['goodsName'])){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10001,
                            'errMsg' => "商品名称不能为空",
                            'skuId' => $item['skuId']
                        ]
                    ]
                ]);
            }

            if( !isset($item['marketPrice']) || empty($item['marketPrice'])){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10002,
                            'errMsg' => "商品市场价不能为空",
                            'skuId' => $item['skuId']
                        ]
                    ]
                ]);
            }

            if( !isset($item['salePrice']) || empty($item['salePrice'])){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10003,
                            'errMsg' => "商品销售价不能为空",
                            'skuId' => $item['skuId']
                        ]
                    ]
                ]);
            }

            if( !isset($item['upcId']) || empty($item['upcId'])){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10004,
                            'errMsg' => "商品条形码不能为空",
                            'skuId' => $item['skuId']
                        ]
                    ]
                ]);
            }

            $st_goods = StGoods::where('name',$item['goodsName'])->first();

            if( !$st_goods ){
                $st_goods = new StGoods();
                $st_goods -> creator = 'system';
                $st_goods -> name = $item['goodsName'];
                $st_goods -> price = $item['salePrice'];
                $st_goods -> spec_type = 0;
                $st_goods -> describe = isset($item['describe']) ? $item['describe'] : '';
                $st_goods -> status = 2;
                $st_goods -> big_category_name = '';
                $st_goods -> save();
            }

            $st_goods_sale = StGoodsSale::where('sku',$item['skuId'])->first();

            if( !$st_goods_sale ){
                $st_goods_sale = new StGoodsSale();
                $st_goods_sale -> creator = 'system';
                $st_goods_sale -> goods_id = $st_goods->id;
                $st_goods_sale -> name = $item['goodsName'];
                $st_goods_sale -> price = $item['salePrice'];
                $st_goods_sale -> status = 2;
                $st_goods_sale -> sku = $item['skuId'];
                $st_goods_sale -> upc = $item['upcId'];
                $st_goods_sale -> sku_spec = 1;
                $st_goods_sale -> big_category_id = 0;
                $st_goods_sale -> big_category_name = '';
                $st_goods_sale -> weight = isset($item['weight']) ? $item['weight'] : '';
                $st_goods_sale -> save();
            }
        }

        return response()->json(['errCode'=>0, 'data'=>[]]);

    }


    /**
     * 批量修改门店商品价格
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function batchPrice(Request $request)
    {

        $body = $request->input('body','');
        $body_arr = json_decode($body ,true);

        if( !is_array($body_arr) || empty($body_arr) ){
            return response() -> json([
                'errCode' => 1,
                'errMsg' => '缺少商品参数:body',
                'data' => []
            ]);
        }

        foreach ( $body_arr as $item ){

            if( !isset($item['mallCode']) || empty($item['mallCode'])){
                return response()->json([
                    'errCode' => 1,
                    'errMsg' => '确少参数:mallCode',
                    'data' => []
                ]);
            }

            $st_mall = StMall::where('code',$item['mallCode'])->first();

            if( !$st_mall ){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10000,
                            'errMsg' => "店铺不存在",
                            'skuId' => $item['skuId'],
                            'mallCode' => $item['mallCode']
                        ]
                    ]
                ]);
            }

            if( !isset($item['skuId']) || empty($item['skuId'])){
                return response()->json([
                    'errCode' => 1,
                    'errMsg' => '确少参数:skuId',
                    'data' => []
                ]);
            }

            if( !isset($item['marketPrice']) || empty($item['marketPrice'])){
                return response()->json([
                    'errCode' => 1,
                    'errMsg' => '确少参数:marketPrice',
                    'data' => []
                ]);
            }

            if( !isset($item['salePrice']) || empty($item['salePrice'])){
                return response()->json([
                    'errCode' => 1,
                    'errMsg' => '确少参数:salePrice',
                    'data' => []
                ]);
            }

            $st_app_goods_sale = StAppGoodsSale::where([['mall_id',$item['mallCode']],['sku',$item['skuId']]])->find();

            if( $st_app_goods_sale -> isEmpty()){
                return response()->json([
                    'errCode' => 0,
                    'data' => [
                        'error' => [
                            'errCode' => 10000,
                            'errMsg' => "商品不存在",
                            'skuId' => $item['skuId'],
                            'mallCode' => $item['mallCode']
                        ]
                    ]
                ]);
            }

            StAppGoodsSale::where([['mall_id',$item['mallCode']],['sku',$item['skuId']]])
                            ->update(['price'=>$item['salePrice']]);

            foreach ( $st_app_goods_sale as $value ){
                $args = [
                    'mall_id' => $st_mall->id,
                    'goods' => [
                        $value->goods_id => [
                            $value -> spec_id => $item -> salePrice
                        ]
                    ]
                ];

                $res = Wm::send($item -> app_id .'.goods.batch_update_price' ,$args );

                if( $res['code'] != 200 ){
                    return response()->json(['code' => 400 ,'message' => $res['message']]);
                }
            }
        }

        return response()->json(['errCode'=>0, 'data'=>[]]);

    }


    /**
     * 批量修改门店商品库存
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function batchStore(Request $request)
    {

        return response()->json(['errCode'=>0, 'data'=>[]]);

    }


}
