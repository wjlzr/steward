<?php

namespace App\Http\Controllers\Common;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Services\Storage\StorageService;

class UploadController extends Controller
{
    
    public function index()
    {
        return view('test');
    }

    //定义允许上传的文件扩展名
    const EXT_ARR = [
        'photo' => ['gif', 'jpg', 'jpeg', 'png', 'bmp'],
        'media' => ['swf', 'flv', 'mp3', 'wav', 'wma', 'wmv', 'mid', 'avi', 'mpg', 'asf', 'rm', 'rmvb'],
        'file' => ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'htm', 'html', 'txt', 'zip', 'rar', 'gz', 'bz2','csv'],
        'excel_file' => ['xls', 'xlsx']
    ];

    /**
     * 允许的上传操作
     * 1. key为上传的文件目录
     * 2. value为允许上传的文件类型
     */
    const ACTION = [
        'company/base' => [ // 客户基本信息图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 3, //单位M
            'max_size_error' => '上传图片大小不能大于3M'
        ],
        'company/sale' => [ // 客户基本信息图片上传
            'type' => ['file'],
            'type_error' => '当前操作只允许上传文档',
            'max_size' => 3, //单位M
            'max_size_error' => '上传文件大小不能大于3M'
        ],
        'company/contracts' => [ //客户合同文件及图片上传
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片及文件',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传图片大小不能大于3M'

        ],
        'company/photo' => [ //客户合同文件及图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 3,
            'max_size_error' => '上传图片大小不能大于3M'
        ],
        'cms/category' => [ //cms分类图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传图片大小不能大于3M'
        ],
        'cms/article' => [ //cms文章图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传图片大小不能大于3M'
        ],
        'project/demand' => [ //客户需求中心附件及图片上传
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片及文件',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传图片大小不能大于3M'
        ],
        'permission/group' => [ //客户需求中心附件及图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'task/accessory' => [ //官网任务系统附件及图片上传
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 10,  //单位M
            'max_size_error' => '上传图片大小不能大于10M'
        ],
        'cmdb/maintenance' => [ //CMDB运维管理附件及图片上传
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'wdh/template' => [ //wdh活动模板图片上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'notice/edit' => [ //公告上传图片
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'notice/accessory' => [ //公告上传附件
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'apply/accessory' => [ //申请上传附件
            'type' => ['file', 'photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'menber/grade' => [ //会员等级会员等级头像上传
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],
        'market/cust' => [ //会员等级会员等级头像上传
            'type' => ['file'],
            'type_error' => '当前操作只允许上传csv文件',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],

        'goods/photo' => [
            'type' => ['photo'],
            'type_error' => '当前操作只允许上传图片',
            'max_size' => 1,  //单位M
            'max_size_error' => '上传图片大小不能大于1M'
        ],

        'goods/upload' => [
            'type' => ['excel_file'],
            'type_error' => '当前操作只允许上传文件',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传图片大小不能大于3M'
        ],

        'mall/upload' => [
            'type' => ['excel_file'],
            'type_error' => '当前操作只允许上传文件',
            'max_size' => 3,  //单位M
            'max_size_error' => '上传文件大小不能大于3M'
        ],
    ];

    public function upload(Request $request)
    {

        //获取上传文件
        $file = $request->file('file');

        //检查上传操作
        $action = $request->input('action');

        if (!$action || !isset($this::ACTION[$action])) {
            return response()->json(['code' => 1000001, 'message' => '上传参数错误'])->header('Content-Type','text/html');
        }

        $action_data = $this::ACTION[$action];
        //检查上传错误
        $upload_error_code = $file->getError();

        if (!empty($upload_error_code)) {
            switch($upload_error_code){
                case 1:
                    $error = '超过允许上传的大小。';   // 配置项
                    break;
                case 2:
                    $error = '超过表单允许上传的大小';   // 表单设置
                    break;
                case 3:
                    $error = '图片只有部分被上传';
                    break;
                case 4:
                    $error = '请选择图片';
                    break;
                case 5:
                    $error = '找不到临时目录';
                    break;
                case 6:
                    $error = '写文件到硬盘出错';
                    break;
                case 8:
                    $error = 'File upload stopped by extension';
                    break;
                case 999:
                default:
                    $error = '未知错误';
            }
            return response()->json(['code' => 1000002, 'message' => $error])->header('Content-Type','text/html');
        }

        //文件上传成功
        if ($file->isValid()) {

            //文件名
            $file_name = $file->getClientOriginalName();

            //获得文件扩展名
            $file_ext = $file->getClientOriginalExtension();

            //文件大小
            $file_size = $file->getClientSize();

            //检查文件名
            if (!$file_name) {
                return response()->json(['code' => 1000003, 'message' => '请选择文件'])->header('Content-Type','text/html');
            }

            //检查文件扩展名是否允许上传，并获取上传文件类型
            $file_type = '';
            foreach ($this::EXT_ARR as $type => $file_ext_arr) {
                if (in_array($file_ext, $file_ext_arr)) {
                    $file_type = $type;
                }
            }

            if (!$file_type) {
                return response()->json(['code' => 1000004, 'message' => '扩展名是[' . $file_ext . ']的文件禁止上传'])->header('Content-Type','text/html');
            }
            //  检查文件类型
            if (!in_array($file_type, $action_data['type'])) {
                return response()->json(['code' => 1000005, 'message' => $action_data['type_error']])->header('Content-Type','text/html');
            }

            //检查文件大小
            if ($file_size > $action_data['max_size'] * 1048576) {
                return response()->json(['code' => 1000006, 'message' => $action_data['max_size_error']])->header('Content-Type','text/html');
            }

            $directory = 'uploads/' . $file_type . '/' . $action ;

            $new_file_name = date('YmdHis') . rand(10000, 99999) . '.' . $file_ext;

            error_log('======//上传的临时路径');
            error_log($file -> getRealPath());
            error_log($directory);
            error_log($new_file_name);
            //error_log(var_export($_FILES,true));

            /*$file->move($directory,  $new_file_name);
            $data = array(
                'url' => '/'.$directory . '/' . $new_file_name,
                'name' => $file_name,
            );*/

            $Storage = new StorageService();

            $result = $Storage->statFolder($directory);

            if ($result['code'] != 0) {
                $data = $Storage->addFolder($directory);
                if ($data['code'] != 0) {
                    return response()->json(['code' => $data['code'], 'message' => $data['message']]);
                }
            }

            $request = [
                'src_path' => $file -> getRealPath(),
                'dst_path' => $directory.'/'.$new_file_name
            ];

            $upload = $Storage->upload($request);

            if ($upload['code'] != 0) {
                return response()->json(['code' => $upload['code'], 'message' => $upload['message']]);
            }

            $data = array(
                'url' => $upload['data']['source_url'],
                'name' => $file_name,
            );

            return response()->json(['code' => 200, 'data' => $data])->header('Content-Type','text/html');

        } else {

            return response()->json(['code' => 1000010, 'message' => '上传失败'])->header('Content-Type','text/html');
        }

    }

}
