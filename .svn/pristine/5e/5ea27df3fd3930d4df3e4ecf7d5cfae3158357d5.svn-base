<?php

namespace App\Http\Controllers\Admin\Goods;

use Wm;
use App\Models\Goods\StGoods;
use App\Models\StApp;
use App\Models\Mall\StAppMall;
use Illuminate\Http\Request;
use App\Models\Goods\StGoodsSale;
use App\Models\Goods\StGoodsStock;
use App\Models\Goods\StAppGoodsSale;
use App\Http\Controllers\Controller;


class GoodsSynchController extends Controller
{


    //商品同步首页
    public function index(Request $request)
    {

        return view('admin/goods/synch/index', []);

    }

    //列表页数据
    public function search (Request $request)
    {
        //返回数组
        $return_data = [
            'total' => 1,
            'rows' => []
        ];

        $return_data['rows'][] = array(
            'operation' => '详情',
            'sid' => '同步商品至线上分店',
            'sDesc' => '2018-01-03 20 : 45',
            'releaseTime' => '李建兵',
            'status' => '已完成',
            'testStatus' => '35 个商品上架成功'
        );

        return $return_data;
    }

    //商品同步上线/下线页
    public function edit($type)
    {
        return view('admin/goods/synch/edit')->with('type',$type);
    }


    /**
     * 商品同步上线/下线提交
     * @param Request $request
     * @return mixed
     */
    public function submit(Request $request)
    {
        $type = $request->input('type');
        $goods_data = $request->input('goods_data');
        $mall_data = $request->input('mall_data');
        $app_data = $request->input('app_data');
        
        error_log('=====//参数');
        error_log($type);
        error_log(var_export($goods_data,true));
        error_log(var_export($mall_data,true));

        if (empty($type)) {
            return response()->json(['code' => 400, 'message' => '参数错误：type']);
        }

        if (empty($goods_data)) {
            return response()->json(['code' => 400, 'message' => '请选择需要同步的商品']);
        }

        if (empty($mall_data)) {
            return response()->json(['code' => 400, 'message' => '请选择需要同步门店']);
        }

        if (empty($app_data)) {
            return response()->json(['code' => 400, 'message' => '请选择同步平台']);
        }
        
        //同步商品至线上平台
        if ($type == 1) {
            //重组商品数据
            $goodsID = [];
            foreach ($goods_data as $goods) {
                $stGoodsSale = StGoodsSale::find($goods['id']);
                $goodsID[$stGoodsSale->goods_id] = [
                    $stGoodsSale->goods_id
                ];
            }

            error_log(var_export($goodsID,true));
            $request_data = [];
            foreach ($app_data as $app_id=>$app_name) {

                foreach ($mall_data as $mall) {

                    //查询此门店是否在平台创建
                    $appMall = StAppMall::where(['mall_id' => $mall['id'],'status' => 1,'app_id' => $app_id])->first();
                    if (!$appMall) {
                        continue;
                    }

                    foreach ($goodsID as $k=>$v) {

                        $stAppGoods = StAppGoodsSale::where(['goods_id' => $k,'mall_id' => $mall['id'],'app_id' => $app_id])->first();
                        if ($stAppGoods) {
                            continue;
                        }

                        $stGoods = StGoods::find($k);
                        if (!$stGoods) {
                            continue;
                        }

                        if ($stGoods->small_category_id) {
                            $category_id = $stGoods->small_category_id;
                        }elseif ($stGoods->mid_category_id) {
                            $category_id = $stGoods->small_category_id;
                        }else{
                            $category_id = $stGoods->big_category_id;
                        }

                        $stGoodsSale = StGoodsSale::where('goods_id',$k)->get();
                        if ($stGoodsSale->count() <= 0) {
                            continue;
                        }
                        $spec = [];
                        foreach ($stGoodsSale as $sale) {

                            //库存
                            $stGoodsStock = stGoodsStock::where(['sku' => $sale->sku,'mall_id' => $mall['id']])->first();

                            $spec[] = [
                                'spec_id'  => $sale->id,
                                'name' => $sale->name,
                                'price' => $sale->price,
                                'product_code' => $sale->sku,
                                'stock' => $stGoodsStock->enable_number,
                                'upc' => $sale->upc
                            ];
                        }

                        $request_data[] = [
                            'mall_id' => $mall['id'],
                            'category_id' => $category_id,
                            'goods_name' => $stGoods->name,
                            'goods_id' => $stGoods->id,
                            'spec' => $spec
                        ];
                    }

                }

                switch ($app_id) {

                    //百度外卖
                    case 1:

                        $res = Wm::send('bdFood.goods.batch_create_product', $request_data);
                        if( $res['code'] != 200 ){
                            return response()->json(['code' => 400 ,'message' => $res['message']]);
                        }
                        break;

                    //饿了么外卖
                    case 2:

                        $res = Wm::send('eleMe.goods.batch_create_product', $request_data);
                        if( $res['code'] != 200 ){
                            return response()->json(['code' => 400 ,'message' => $res['message']]);
                        }
                        break;

                    //美团外卖
                    case 3:

                        $res = Wm::send('MtFood.goods.batch_create_product', $request_data);
                        if( $res['code'] != 200 ){
                            return response()->json(['code' => 400 ,'message' => $res['message']]);
                        }
                        break;

                    //京东到家
                    case 4:

                        $res = Wm::send('jdDj.goods.batch_create_product', $request_data);
                        if( $res['code'] != 200 ){
                            return response()->json(['code' => 400 ,'message' => $res['message']]);
                        }
                        break;
                }

            }

            return response()->json(['code'=>200, 'message'=>'发布成功', 'data'=>[]]);
        }else{



        }

    }

    //获取平台数据
    public function app()
    {

        $app_data = StApp::all()->where('enable',1)->toArray();

        if (empty($app_data)) {
            return response()->json(['code' => 400, 'message' => '暂无应用平台']);
        }

        return response()->json(['code' => 200, 'message' => 'ok', 'data' => $app_data]);
    }

}
