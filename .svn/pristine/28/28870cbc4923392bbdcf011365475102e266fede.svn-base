<?php
/**
 * 华冠项目 - 商品接口类
 * @author   liudaoyang <liudaoyang@ebsig.com>
 * @version 1.0
 */

namespace App\Service\Rpc\Goods;
use DB;


class HgGoods
{

    private $httpUrl = '';

    private $appId = '40fe9ad4949331a12f5f19b477133924';

    private $key = 'f7a198818328ef8ed10cf403d3c9ce91';

    public function request($request_url, $api_name, $get_data = [], $post_data = [], $request_way = 'get' )
    {

        //连接接口参数
        $http_opts = array(
            CURLOPT_TIMEOUT => 30,
            CURLOPT_CONNECTTIMEOUT => 10,
            CURLOPT_HTTPAUTH => CURLAUTH_BASIC,
            CURLOPT_USERPWD => 'guest:guest',
            CURLOPT_HTTPHEADER => array('Accept: application/json', 'Content-Type: application/json')
        );

        //实例http类
        $ebsigHttp = new HttpService();

        //接口开始时间
        $start_time = microtime(true);

        //请求接口
        $result_array = $ebsigHttp->post($request_url, $post_data, $http_opts);

        //接口请求结束时间
        $end_time = microtime(true);

        return $result_array;
    }

    //拉取库存
    public function store(){

        set_time_limit(0);

        $url = $this->http_url . 'invservice/businv/query'; //门店库存接口地址

        //获取库存比率
        $store_ratio = ConfigureFunction::getConfigureField(34, 'store_ratio');
        if (!$store_ratio) {
            $store_ratio = 1;
        }

        //查询门店信息
        $mall = MallMaster::where(['useFlg' => 1])
            ->get()
            ->toArray();

        if (!$mall) {
            return ['code' => 100000, 'message' => '门店信息不存在'];
        }

        $page = 1;
        $rp = 100;

        while ($page > 0) {

            if ($store_ratio == 0 || $store_ratio == '0.00') {
                break;
            }

            //分页查询商品信息
            $goods_data = GoodsSale::where(['useFlg' => 1, 'forsale' => 1])
                ->offset(($page - 1) * $rp)
                ->limit($rp)
                ->get()
                ->toArray();

            if (!$goods_data) {
                break;
            }

            if (!isset($goods_data[$rp - 1])) {
                $page = 0;
            } else {
                $page++;
            }

            //插入数据数组
            $insert_data = [];

            //三级商品编码数组
            $parameters = [];

            //商品数组
            $skus = [];

            foreach ($goods_data as &$g) {

                $parameters[] = $g['product_code'];

                if (!isset($skus[$g['product_code']])) {
                    $skus[$g['product_code']] = [
                        'postID'       => $g['postID'],
                        'goodsName'      => $g['goodsName'],
                        'goodsType'    => $g['goodsType'],
                        'product_code'   => $g['product_code'],
                        'mainPostID'   => $g['mainPostID'],
                        'forsale' => $g['forsale']
                    ];
                }
            }

            foreach ($mall as $m) {

                $param = [
                    'appId' => $this->appid,
                    'version' => '1.0',
                    'timestamp' => time(),
                    'format' => 'json',
                    'scope' => '',
                    'param' => json_encode([
                        'product_code_data' => $parameters,
                        'mall_code' => $m['mallCode']
                    ])
                ];

                $param['sign'] = createSign($param);

                //接口请求
                $store_data =  $this->requestApi($url,'store', [], $param,'post');
                if ($store_data['code'] != 200 || $store_data['data']) {
                    continue;
                }

                //插入库存
                $insert_wms_sql = 'REPLACE INTO wms_goodsstore (uuid,timeStamp,creator,createTime,mainPostID,storeID,product_code,goodsName,enableSaleAmount,sync_offline_stock,forsale) VALUES ';

                //插入库存主表
                $insert_wms_master_sql = 'REPLACE INTO wms_goods_master (uuid,timeStamp,creator,createTime,storeID,mainPostID) VALUES ';

                //商品库存日志
                $insert_api_store_sql = 'REPLACE INTO goods_log_api_store (updated_at,created_at,mall_name,mall_code,goods_name,product_code,amount) VALUES ';


                foreach ($store_data['data'] as $store) {

                    $product_code = $store['product_code'];
                    $mainPostID = $skus[$product_code]['mainPostID'];
                    $goodsName = $skus[$product_code]['goodsName'];
                    $forsale = $skus[$product_code]['forsale'];

                    //检查商品是否存在
                    if (!isset($skus[$product_code]) || empty($skus[$product_code])) {
                        continue;
                    }

                    //查询改库存是否禁用
                    $is_store = WmsGoodsStore::where(['storeID' => $m['mallID'], 'product_code' => $m['product_code'], 'sync_offline_stock' => 0])->first();
                    if ($is_store) {
                        continue;
                    }

                    $store = floor($store['qty']);

                    //查询已有订单商品数量
                    $bill_sql = 'SELECT SUM(bg.goods_amount) AS num FROM bill_master bm
                       INNER JOIN bill_goods bg
                       ON bm.bill_no = bg.bill_no
                       WHERE bm.bill_status IN (1, 3) AND bm.mallCode = "'.$m['mallCode'].'" AND bg.product_code = "'.$product_code.'"';
                    $bill_data = DB::select($bill_sql);
                    if ( $bill_data ) {
                        $store = $store - $bill_data[0]['num'];
                    }

                    if ($store <= 0) {
                        $store = 0;
                    }

                    $insert_wms_sql .= '("'.makeUuid().'","'.Carbon::now().'","createShopGoods","'.Carbon::now().'",'.$mainPostID.','.$m['mallID'].
                        ',"'.$product_code.'","'.$goodsName.'",'.$store.',1,'.$forsale.'),';


                    $insert_wms_master_sql .= '("'.makeUuid().'","'.Carbon::now().'","createShopGoods","'.Carbon::now().'",'.$m['mallID'].
                        ','.$mainPostID. '),';


                    $insert_api_store_sql .= '("'.Carbon::now().'","'.Carbon::now().'","'.$m['mallName'].'","'.$m['mallCode'].
                        '","'.$goodsName.'","'.$product_code.'",'.$store.'),';
                }

                $insert_data[] = substr($insert_wms_sql,0,-1);
                $insert_data[] = substr($insert_wms_master_sql,0,-1);
                $insert_data[] = substr($insert_api_store_sql,0,-1);
            }

            //分割数组
            $sql_data = array_chunk($insert_data,500);

            try {

                DB::beginTransaction();

                if( !empty($sql_data) ){
                    foreach ( $sql_data as $insert_sql ){
                        foreach($insert_sql as $sql){
                            DB::insert($sql);
                        }
                    }
                }

                DB::commit();

            } catch (\Exception $e) {
                DB::rollBack();
                error_log('华冠库存，任务错误信息：'.$e->getMessage());
                continue;
            }
        }

        return ['code' => 200, 'message' => 'ok'];

    }

    //拉取价格
    public function price(){

        set_time_limit(0);

        $url = $this->http_url . 'invservice/businv/query'; //门店价格接口地址

        //查询门店信息
        $mall = MallMaster::where(['useFlg' => 1])
            ->get()
            ->toArray();

        if (!$mall) {
            return ['code' => 100000, 'message' => '门店信息不存在'];
        }

        $page = 1;
        $rp = 100;

        while ($page > 0) {

            //分页查询商品信息
            $goods_data = GoodsSale::where(['useFlg' => 1, 'forsale' => 1])
                ->offset(($page - 1) * $rp)
                ->limit($rp)
                ->get()
                ->toArray();

            if (!$goods_data) {
                break;
            }

            if (!isset($goods_data[$rp - 1])) {
                $page = 0;
            } else {
                $page++;
            }

            //插入数据数组
            $insert_data = [];

            //三级商品编码数组
            $parameters = [];

            //商品数组
            $skus = [];

            foreach ($goods_data as &$g) {

                $parameters[] = $g['product_code'];

                if (!isset($skus[$g['product_code']])) {
                    $skus[$g['product_code']] = [
                        'postID' => $g['postID'],
                        'goodsName' => $g['goodsName'],
                        'product_spec' => $g['product_spec'],
                        'product_code' => $g['product_code'],
                        'mainPostID' => $g['mainPostID'],
                        'salePoints' => $g['salePoints']
                    ];
                }
            }

            foreach ($mall as $m) {

                $param = [
                    'appId' => $this->appid,
                    'version' => '1.0',
                    'timestamp' => time(),
                    'format' => 'json',
                    'scope' => '',
                    'param' => json_encode([
                        'product_code_data' => $parameters,
                        'mall_code' => $m['mallCode']
                    ])
                ];

                $param['sign'] = createSign($param);

                //接口请求
                $price_data =  $this->requestApi($url,'price', [], $param,'post');
                if ($price_data['code'] != 200 || $price_data['data']) {
                    continue;
                }

                //插入经营策略
                $insert_goods_marketing_sql = 'REPLACE INTO goods_marketing_strategy VALUES ';

                //商品价格日志
                $insert_api_price_sql = 'REPLACE INTO goods_log_api_price (updated_at,created_at,mall_name,mall_code,goods_name,product_code,market_price,sale_price) VALUES ';

                foreach ($price_data['data'] as $price) {

                    $product_code = $price['product_code'];
                    $mainPostID = $skus[$product_code]['mainPostID'];
                    $postID = $skus[$product_code]['postID'];
                    $product_spec = $skus[$product_code]['product_spec'];
                    $goodsName = $skus[$product_code]['goodsName'];
                    $salePoints = $skus[$product_code]['salePoints'];

                    //检查商品是否存在
                    if (!isset($skus[$product_code]) || empty($skus[$product_code])) {
                        continue;
                    }

                    $marketPrice = sprintf("%1.2f", $price['price']);
                    $salePrice = sprintf("%1.2f", $price['price']);

                    $insert_goods_marketing_sql .= '("'.makeUuid().'","'.Carbon::now().'","createPrice","'.Carbon::now().'",'.$mainPostID.
                        ','.$m['mallID'].','.$postID.',"'.$product_code.'","'.$product_spec.'","'.$goodsName.
                        '","'.$marketPrice.'","'.$salePrice.'",'.$salePoints.'),';

                    $insert_api_price_sql .= '("'.Carbon::now().'","'.Carbon::now().'","'.$m['mallName'].'","'.$m['mallCode'].
                        '","'.$goodsName.'","'.$product_code.'","'.$marketPrice.'","'.$salePrice.'"),';

                }

                $insert_data[] = substr($insert_goods_marketing_sql,0,-1);
                $insert_data[] = substr($insert_api_price_sql,0,-1);
            }

            //分割数组
            $sql_data = array_chunk($insert_data,500);

            try {

                DB::beginTransaction();

                if( !empty($sql_data) ){
                    foreach ( $sql_data as $insert_sql ){
                        foreach($insert_sql as $sql){
                            DB::insert($sql);
                        }
                    }
                }

                DB::commit();

            } catch (\Exception $e) {
                DB::rollBack();
                error_log('华冠门店价格，任务错误信息：'.$e->getMessage());
                continue;
            }

        }
    }


    function createSign( $data ) {

        ksort($data);

        $sign_str = '';
        foreach ($data as $k => $v) {
            if ($v == '') {
                continue;
            }
            if ($k == 'sign') {
                continue;
            }

            if ($sign_str == '') {
                $sign_str .= $k . '=' . $v;
            } else {
                $sign_str .= '&' . $k . '=' . $v;
            }

        }
        $sign_str .= 'key=' . $this->key;

        return strtoupper(md5($sign_str));

    }

}

